trigger:
  - "*"

variables:
  buildConfiguration: "Release"
  releaseBranchName: "release"

schedules:
  - cron: "0 3 * * *"
    displayName: "Deploy every day at 3 A.M."
    branches:
      include:
        - release
    always: false

stages:
  - stage: "Build"
    displayName: "Build the web application"
    jobs:
      - job: "Build"
        displayName: "Build job"
        pool:
          vmImage: "ubuntu-latest"
          demands:
            - npm
        variables:
          wwwrootDir: "Tailspin.SpaceGame.Web/wwwroot"
          dotnetSdkVersion: "8.x" # CORRECTED: Use .NET SDK 8.x for .NET 8.0 project
        steps:
          - task: UseDotNet@2
            displayName: "Use .NET SDK $(dotnetSdkVersion)"
            inputs:
              version: "$(dotnetSdkVersion)"

          # ADDED BACK: NodeTool@0 to ensure correct Node.js version
          - task: NodeTool@0
            displayName: "Install Node.js 18.x"
            inputs:
              versionSpec: "18.x"

          - task: Npm@1
            displayName: "Run npm install"
            inputs:
              command: "install" # Explicitly use 'install' command
              verbose: false
              workingDirectory: "Tailspin.SpaceGame.Web" # CORRECTED: Specify workingDirectory for npm install

          # REMOVED: The old 'Compile Sass assets' script task - it's replaced by Gulp
          # - script: "./node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)"
          #   displayName: "Compile Sass assets"

          - task: Gulp@1
            displayName: "Run Gulp build tasks (min:js, min:css)" # More descriptive display name
            inputs:
              gulpFile: "gulpfile.js" # CORRECTED: Path relative to workingDirectory
              targets: "min" # As per our discussion, this targets your 'min' task
              workingDirectory: "Tailspin.SpaceGame.Web" # CORRECTED: Specify workingDirectory for Gulp task

          - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
            displayName: "Write build info"
            workingDirectory: $(wwwrootDir)

          - task: DotNetCoreCLI@2
            displayName: "Restore project dependencies"
            inputs:
              command: "restore"
              projects: "**/*.csproj"
          - task: DotNetCoreCLI@2
            displayName: "Build the project - $(buildConfiguration)"
            inputs:
              command: "build"
              arguments: "--no-restore --configuration $(buildConfiguration)"
              projects: "**/*.csproj"
          - task: DotNetCoreCLI@2
            displayName: "Publish the project - $(buildConfiguration)"
            inputs:
              command: "publish"
              projects: "**/*.csproj"
              publishWebProjects: false
              arguments: "--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)"
              zipAfterPublish: true
          - publish: "$(Build.ArtifactStagingDirectory)"
            artifact: drop

  - stage: "Dev"
    displayName: "Deploy to the dev environment"
    dependsOn: Build
    condition: |
      and
      (
        succeeded(),
        eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
      )
    jobs:
      - deployment: Deploy
        pool:
          vmImage: "ubuntu-latest"
        environment: dev
        variables:
          - group: Release
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureWebApp@1
                  displayName: "Azure App Service Deploy: website"
                  inputs:
                    azureSubscription: "Resource Manager - Tailspin - Space Game"
                    appName: "$(WebAppNameDev)"
                    package: "$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip"

  - stage: "Test"
    displayName: "Deploy to the test environment"
    dependsOn: Dev
    jobs:
      - deployment: Deploy
        pool:
          vmImage: "ubuntu-latest"
        environment: test
        variables:
          - group: "Release"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureWebApp@1
                  displayName: "Azure App Service Deploy: website"
                  inputs:
                    azureSubscription: "Resource Manager - Tailspin - Space Game"
                    appName: "$(WebAppNameTest)"
                    package: "$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip"

  - stage: "Staging"
    displayName: "Deploy to the staging environment"
    dependsOn: Test
    jobs:
      - deployment: Deploy
        pool:
          vmImage: "ubuntu-latest"
        environment: staging
        variables:
          - group: "Release"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureWebApp@1
                  displayName: "Azure App Service Deploy: website"
                  inputs:
                    azureSubscription: "Resource Manager - Tailspin - Space Game"
                    appName: "$(WebAppNameStaging)"
                    package: "$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip"
